% Load the dataset
load movie_ratings.mat

% Set the number of latent features
K = 3;

% Set the learning rate and regularization parameter
alpha = 0.0002;
beta = 0.02;

% Initialize the user and item feature matrices
P = randn(size(Y, 1), K);
Q = randn(K, size(Y, 2));
Q = Q';

% Perform stochastic gradient descent
for epoch = 1:100
    disp(epoch);
    for i = 1:size(Y, 1)
        for j = 1:size(Y, 2)
            if Y(i ,j) ~= 0
                err = Y(i, j) - P(i, :) * Q(:, j);
                %disp(err);
                %disp(Y(i, j));
                %disp(P(i, :));
                disp("Next");
                disp(Q(:, j));
                for k = 1:K
                P(i, k) = P(i, k) + alpha * (2 * err * Q(k, j) - beta * P(i, k));
                Q(k, j) = Q(k, j) + alpha * (2 * err * P(i, k) - beta * Q(k, j));
                end
            end
        end
    end
    eR = P*Q;
    e = 0;
    for i = 1:size(Y, 1)
        for j = 1:size(Y, 2)
            if Y(i, j) > 0
                e = e + power(Y(i, j) - P(i, :) * Q(:, j), 2);
                for k = 1:K
                    e = e + (beta / 2) * (power(P(i, k), 2) + power(Q(k, j), 2));
                end
            end
        end
    end
    if e < 0.01
        break;
    end
end


% Compute the predicted ratings
Y_pred = P*Q;

% Evaluate the performance using root mean squared error
RMSE = sqrt(mean((Y(Y ~= 0) - Y_pred(Y ~= 0)).^2));
fprintf('RMSE: %.4f\n', RMSE);
